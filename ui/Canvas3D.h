/*!
   @file   Canvas3D.h
   @author Ben Herila (ben@herila.net)
   @author Evan Wallace (evan.exe@gmail.com)
   @date   Fall 2010
*/

#ifndef CANVAS3D_H
#define CANVAS3D_H

#include "SupportCanvas3D.h"
#include <QGLWidget>
#include <QHash>
#include <QString>
#include <QTimer>
#include <QTime>
#include "fountain/Emitter.h"
#include "resourceloader.h"

struct LabCamera {
    Vector3 eye, center, up;
    Vector4 look;
    float fovy, near, far;
    Vector4 u, v, w;
};

class Shape;

/*!
   @class Canvas3D

   @brief 3D canvas that uses OpenGL. Students will implement this canvas in
   the OpenGL labs and in the Shapes, Camtrans, and Sceneview assignments.

**/
//class Canvas3D : public SupportCanvas3D
class Canvas3D : public QGLWidget
{
    Q_OBJECT
public:
    Canvas3D(QWidget *parent);
    virtual ~Canvas3D();

    virtual void initializeGL();
    virtual void paintGL();
    void updateSettings();
    void updateCamera();

    //! This will be called when the settings have changed
    virtual void settingsChanged();

public slots:
//    void pauseFountain();
//    void continueFountain();

protected:
    void initializeResources();
    void loadCubeMap();
    void createShaderPrograms();
    void createFramebufferObjects(int width, int height);
//    void createBlurKernel(int radius, int width, int height, GLfloat* kernel, GLfloat* offsets);
    void resizeGL(int width, int height);
    void paintScene();
    void paintFrontFloor();
    void mousePressEvent(QMouseEvent *event);
    void mouseMoveEvent(QMouseEvent *event);
    void mouseDragged(int x, int y);

    /**
      * Loads the image at the given path and copies its data into an OpenGL texture.
      * @return The unique ID of the texture generated by this function.
      */
    GLuint loadTexture(const QString& path);

    /**
      * Loads the image at the given path into a qt image
      * @return A boolean representing the success of the load
      */
    bool loadImage(QImage *image, const QString &file);

protected slots:
    void tick();

private:
    LabCamera m_camera;

    //fountain
    Emitter** m_emitters;
    QTimer m_timer;
    float m_fps;
    float m_increment;
    int m_curr_draw_type;

    // Resources
    QHash<QString, QGLShaderProgram *> m_shader_programs; // hash map of all shader programs
    QHash<QString, QGLFramebufferObject *> m_framebufferObjects; // hash map of all framebuffer objects
    GLuint m_skybox; // skybox call list ID
    GLuint m_cube_map; // cubeMap texture ID
    QFont m_font; // font for rendering text

    //image processing
    QImage *m_fan;
    QImage *m_zebra;
    QImage *m_checkered;
    QImage *m_image;
    const BGRA** m_curr_pix;
    const BGRA* m_fan_pix;
    const BGRA* m_zebra_pix;
    const BGRA* m_checkered_pix;
    int m_img_height;
    int m_img_width;
    float m_img_scale;
    int m_img_scaled_height;
    float m_curr_height;
    int m_curr_pattern;

    //textures
    GLuint m_concrete_tex_id;
    GLuint m_concrete_back_tex_id;
    GLuint m_concrete_left_tex_id;
    GLuint m_concrete_right_tex_id;
    GLuint m_concrete_floor_tex_id;
    GLuint m_concrete_ceil_tex_id;
    GLuint m_lightstrip_tex_id;
    GLuint m_particle_tex_id;

    //mouse event
    bool m_draggingRight;
    bool m_draggingLeft;



};

#endif // CANVAS3D_H
